from tkinter import *
import tkinter.ttk as ttk  #That code causes several tkinter.ttk
#widgets (Button, Checkbutton, Entry, Frame, Label, LabelFrame
#, Menubutton, PanedWindow, Radiobutton, Scale and Scrollbar)
#to automatically replace the Tk widgets.
#This has the direct benefit of using the
#new widgets which gives a better look and feel across platforms;
#however, the replacement widgets are not completely compatible.
#The main difference is that widget options such as “fg”, “bg”
#and others related to widget styling are no longer present in Ttk widgets.
#Instead, use the ttk.Style class for improved styling effects.


class Emp_Window:
    
    def __init__(self,root, labelframe):
        idlabel = Label(labelframe, text="ID", bg='red')
        idlabel.pack(anchor=NW)
        id=StringVar(master=root)
        idEntry=Entry(labelframe,bd=2,textvariable=id)
        idEntry.pack(anchor=NW)
        idEntry.focus()

        namelabel = Label(labelframe, text="Name")
        namelabel.pack(anchor=NW)
        name=StringVar(master=root)
        nameEntry=Entry(labelframe,bd=2,textvariable=name)
        nameEntry.pack(anchor=NW)


        joblabel = Label(labelframe, text="Job ")
        joblabel.pack(anchor=NW)
        self.jobvar = StringVar(master=root)
        job = ttk.Combobox(labelframe, textvariable=self.jobvar)
        job['values'] = ('Lawyer', 'Accountant', 'Engineer')
        job.pack(anchor=NW)
        #country.bind('<<ComboboxSelected>>', function)


        deptlabel = Label(labelframe, text="Department Name ")
        deptlabel.pack(anchor=NW)
        listbox = Listbox(labelframe, height=2)
        verticalScroll = Scrollbar(labelframe,command=listbox.yview)
        verticalScroll.pack(side=RIGHT, fill=Y)
        listbox.pack()
        listbox['yscrollcommand'] = verticalScroll.set
        for item in ["Accounting", "Engineering", "Law", "Finance"]:
            listbox.insert(END, item)
        def OnDouble( event):
            widget = event.widget
             # get selected line index  # get selected line index
             #index = listbox1.curselection()[0]
            selection=widget.curselection()
            # get the line's text
            value = widget.get(selection[0])
            print( "selection:", selection, ": '%s'" % value)
        """
        # pressing the return key will update edited line
        enter1.bind('<Return>', set_list)
        # or double click left mouse button to update line
        """
        listbox.bind( "<Double-Button-1>",OnDouble)# bind(self, sequence=None, func=None, add=None) Bind to this widget at event SEQUENCE a call to function FUNC.
        """ SEQUENCE is a string of concatenated event patterns.
        An event pattern is of the form  <MODIFIER-MODIFIER-TYPE-DETAIL>
        where MODIFIER is one of Control, Shift, Button1, Double,Triple,etc.
           TYPE is one of Enter, ButtonPress, Motion, ButtonRelease, FocusIn,etc.
           DETAIL is the button number for ButtonPress, ButtonRelease
           Examples are:
           <Control-Button-1> for pressing Control and mouse button 1 or
            <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).
            An event pattern can also be a virtual event of the form
            <<AString>> where AString can be arbitrary. This
            event can be generated by event_generate.
            If events are concatenated they must appear shortly
            after each other.

        """

       
        

        self.radioVar= StringVar(master=root) #I should set the master explicitly, otherwise it will use the PyMOL GUI as master.
        self.radioVar.set(1)
        genders = [
            ("Male",1),
            ("Female",2)
            ]

        Label(labelframe, 
              text="Gender ",
              justify = LEFT
              #padx = 20
              ).pack(anchor=NW)

        for txt, val in genders:
            Radiobutton(labelframe, 
                        text=txt,
                        padx = 20, 
                        variable=self.radioVar, 
                      #  command=ShowChoice,
                         #indicatoron = 0,
                        value=val).pack(anchor=W)
##           # messagebox.showinfo("title",str(v.get()) + "   "+str(val))
        q = Button(root, text='Insert',cursor="boat",justify=CENTER).pack()

       
     #the following code make label inside new frame and set value with listboxitem pressed by user using the function poll
        F2 = Frame(root)
        listlabel = Label(F2)
        def poll():
                #after(delay_ms, callback=None, *args)
                #Registers an alarm callback that is called after a given time.since after only executes the given function once. 
            listlabel.after(200, poll)
            sel = listbox.curselection() # Return list of indices of currently selected item.
            selection = "You selected Combobox item "+self.jobvar.get()+" ListboxItem "+str(sel)+" Radio  " + self.radioVar.get()
            listlabel.config(text=selection)
        listlabel.pack()
        F2.pack(side=TOP)
        poll()
        mainloop()

        

##master = Tk()
##l=LabelFrame(master)
##e=Emp_Window(master,l)
##a=App()
##a.diplay_root()
##master.mainloop()
##
